----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;
------------------------------------------------------------------------------------
----------------------------------- 1BIT FULL ADDER --------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity full_adder is
Port ( a : in STD_LOGIC;
b : in STD_LOGIC;
ci : in STD_LOGIC;
s : out STD_LOGIC;
co : out STD_LOGIC);
end full_adder;
architecture bhv_full of full_adder is
begin
s <= (a xor b) xor ci;
co <= (a and b) or ((a xor b) and ci);
end bhv_full;
-------------------------------------------------------------------------------
------------------------------------ 1BIT AND ---------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity AND_1bit is
Port ( i_a : in STD_LOGIC ;
i_b : in STD_LOGIC ;
result_and : out STD_LOGIC);
end AND_1bit;
architecture Bhv_and_1bit of AND_1bit is
begin
result_and <=i_a and i_b ;
end Bhv_and_1bit;
-------------------------------------------------------------------------------
------------------------------------ 1BIT OR ----------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity OR_1bit is
Port ( in_a : in STD_LOGIC;
in_b : in STD_LOGIC;
result_or : out STD_LOGIC );
end OR_1bit;
architecture Bhv_or_1bit of OR_1bit is
begin
result_or <=in_a or in_b;
end Bhv_or_1bit;
---------------------------------------------------------------------------------------
------------------------ Mux 2to1 -----------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity mux_2to1 is
    Port ( binvert : in  STD_LOGIC_VECTOR(1 DOWNTO 0);
                 b : in std_logic ;
                 O : out STD_LOGIC);
end mux_2to1;

architecture Behavioral of mux_2to1 is
signal oo : std_logic;
begin
process(binvert,b,oo)
begin
oo <= NOT b when (binvert  = '1') else b;
end process;

end Behavioral;
---------------------------------------------------------------------------------------
------------------------ Overflow -----------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity Overflow is 
port (carryin:in std_logic;
carryout:in std_logic;
overflw: out std_logic);
end Overflow;
architecture Bhv of Overflow is
begin
overflw<=carryin xor carryout;
end Bhv;
---------------------------------------------------------------------------------------
------------------------ 1BIT ALU -----------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity 1BIT_ALU is 
  port ( a_in : in std_logic;
         b_in : in std_logic;
         carry_in : in std_logic:=0 ;
         operation : in std_logic_vector (2 downto 0);
         signal less : std_logic ;
         carry_out : out std_logic ;
         Result: out std_logic);

end 1BIT_ALU ;

ARCHITECTURE structure OF 1BIT_ALU IS

    COMPONENT AND_1bit
        Port ( i_a : in STD_LOGIC ;
i_b : in STD_LOGIC ;
result_and : out STD_LOGIC);
    END COMPONENT;

    COMPONENT OR_1bit 
        Port ( in_a : in STD_LOGIC;
in_b : in STD_LOGIC;
result_or : out STD_LOGIC ); 
    END COMPONENT;
    
    COMPONENT full_adder
        Port ( a : in STD_LOGIC;
               b : in STD_LOGIC;
              ci : in STD_LOGIC;
               s : out STD_LOGIC;
              co : out STD_LOGIC);
    END COMPONENT;
    
    COMPONENT binvert 

      Port ( binvert : in  STD_LOGIC_VECTOR(1 DOWNTO 0);
                 b : in std_logic ;
                 O : out STD_LOGIC);
        
    END COMPONENT;

signal o : std_logic ;
signal
signal
signal

BEGIN

process(a_in,b_in,operation)
begin
case operation is
when "000"=>result<= a_in and b_in;
when "001"=>result<= a_in or b_in;
when "010"=>result<= a_in + b_in;
when "110"=>result<= a_in - b_in;
when "111"=>result<= a_in slt b_in;
end case;
end process;

    R_and: AND_1bit PORT MAP (i_a => a_in , i_b => b_in , result_and => Result );
    R_or: OR_1bit PORT MAP (in_a => a_in , in_b => b_in , result_or => Result );
    R_add: full_adder PORT MAP (a => a_in , b => b_in , ci => carry_in , s => Result , co => carry_out );
    R_sub: full_adder PORT MAP (a => a_in , o => b_in , ci => carry_in , s => Result , co => carry_out);
    R_slt: slt PORT MAP (a => a_in , b => b_in , less => Result);  
    
END structure;
---------------------------------------------------------------------------------------
------------------------ LAST ALU -----------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity LAST_ALU is 
  port ( a_input : in std_logic;
         b_input : in std_logic;
         c_in : in std_logic:=0 ;
         op: in std_logic_vector (2 downto 0);
         b_inv : in std_logic_vector (1 downto 0);
         signal lss : std_logic ;
         c_out : out std_logic ;
         res : out std_logic ;
         overflow : out std_logic );

end LAST_ALU ;
----------------------------------------------------------------------------------------
------------------------ 8-BIT ALU -----------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
ENTITY alu8bit IS
PORT(
a : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
b : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
op : IN STD_LOGIC_VECTOR( 2 DOWNTO 0);
result : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
cout : OUT STD_LOGIC;
overflow : OUT STD_LOGIC);
END alu8bit;

architecture structural of alu8bit is

begin

 bit1: 1BIT_ALU port map(a(0)=>a_in,b(0)=>b_in,op=>operation,cout=>carry_in,overflow=>less,result(0)=>result);
 bit2: 1BIT_ALU port map(a(1)=>a_in,b(1)=>b_in,op=>operation,cout=>carry_in,overflow=>less,result(1)=>result);
 bit3: 1BIT_ALU port map(a(2)=>a_in,b(2)=>b_in,op=>operation,cout=>carry_in,overflow=>less,result(2)=>result);
 bit4: 1BIT_ALU port map(a(3)=>a_in,b(3)=>b_in,op=>operation,cout=>carry_in,overflow=>less,result(3)=>result);
 bit5: 1BIT_ALU port map(a(4)=>a_in,b(4)=>b_in,op=>operation,cout=>carry_in,overflow=>less,result(4)=>result);
 bit6: 1BIT_ALU port map(a(5)=>a_in,b(5)=>b_in,op=>operation,cout=>carry_in,overflow=>less,result(5)=>result);
 bit7: LAST_ALU port map(a(6)=>a_in,b(6)=>b_in,op=>operation,cout=>carry_in,overflow=>less,result(6)=>result);
 bit8: 1BIT_ALU port map(a(7)=>a_in,b(7)=>b_in,op=>operation,cout=>carry_in,overflow=>lss,result(7)=>result);
  
end structural;
------------------------------------------------------------------------------------------